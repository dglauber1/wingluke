@use "../styles/variables/" as v;
@use "../styles/helpers";

.header {
  position: fixed;
  top: calc(var(--header-room) - var(--header-max-room));
  transition: top 0.2s ease-in-out 0s;
  z-index: v.$header-z-index;
  height: v.$header-top-bar-height + v.$header-bottom-bar-height;
  width: 100vw;
  background: v.$primary-brand-color;
  box-shadow: 0 10px 5px -5px rgba(0, 0, 6, 0.15),
    0 5px 2.5px -2.5px rgba(0, 0, 6, 0.15);
  // 0 5px 2.5px 0px rgba(0, 0, 6, 0.1);
  // maybe use transform: scaleY(1) so height doesn't have to be explicitly defined? can be defined as auto instead
  // https://css-tricks.com/using-css-transitions-auto-dimensions/
  // height: auto;
  // overflow: hidden;

  .nav {
    height: 100%;

    .bottomBar {
      height: v.$header-bottom-bar-height;

      .primaryItems {
        height: 100%;
        width: 100%;
        display: flex;
        justify-content: space-around;
        align-items: center;

        button {
          @include helpers.remove-default-button-styles();
          color: white;

          &:focus {
            // outline: none;
          }

          &:hover {
            text-decoration: underline;
            // border-bottom: 1px solid white;
          }
        }
      }
    }

    .topBar {
      // padding: (v.$baseline / 2) v.$baseline;
      // height: $top-bar-height;
      height: v.$header-top-bar-height;
      display: flex;
      align-items: center;
      justify-content: stretch;

      .homeLink {
        flex: 0 1 auto;
        text-transform: uppercase;
        letter-spacing: 1px;
        color: white;
        font-size: v.$baseline;
        font-weight: 300;
        white-space: nowrap;
        padding: 0 v.$baseline / 2;

        display: flex;
        justify-content: center;
        align-items: center;
        width: fit-content;
        height: 100%;

        img {
          min-width: auto;
          height: 100%;
          // max-width: 13rem;
          max-height: v.$header-top-bar-height / 2;
          margin: 0;
          // margin: auto 0;
        }
      }

      .ctas {
        flex: 1 0;
        display: flex;
        align-items: center;
        justify-content: space-evenly;

        a {
          margin: v.$baseline / 2;
          // color: white;
          // @include helpers.button-style(v.$primary-brand-color, white, 0%);
          // text-decoration: none;
          @include helpers.button-style(
            v.$light-gray,
            v.$transparent-black-darker,
            30%
          );
        }
      }
    }
  }

  .expandingContainer {
    visibility: hidden;
    height: 0;
    width: 100vw;
    z-index: v.$header-expanding-container-z-index;

    &.headerIsOpen {
      visibility: visible;
      height: calc(100vh - var(--header-room));
    }

    transition: all 0.2s ease-in-out 0s;
    position: fixed;
    top: var(--header-room);
    overflow: auto;

    text-align: center;
    // min-width: 33vw;
    // max-width: 50vw;
    // width: fit-content;
    margin: 0 auto;
    // margin-left: 30vw;

    a {
      border: 4px solid transparent;

      padding: 0 v.$baseline / 4;
      font-size: 3rem;
      color: white;
      display: block;

      &:hover {
        border: 4px solid rgba(white, 0.7);
      }
    }

    .activeLink {
      border: 4px solid white;
      cursor: default;

      &:hover {
        border: 4px solid white;
      }
    }
  }
}
